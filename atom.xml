<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[DBits]]></title>
  <link href="http://engineersamuel.github.io/dbits/atom.xml" rel="self"/>
  <link href="http://engineersamuel.github.io/dbits/"/>
  <updated>2013-10-16T17:18:40-04:00</updated>
  <id>http://engineersamuel.github.io/dbits/</id>
  <author>
    <name><![CDATA[Samuel Mendenhall]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Speeding up Ruby Regular Expressions]]></title>
    <link href="http://engineersamuel.github.io/dbits/blog/2013/10/16/speeding-up-ruby-regular-expressions/"/>
    <updated>2013-10-16T15:36:00-04:00</updated>
    <id>http://engineersamuel.github.io/dbits/blog/2013/10/16/speeding-up-ruby-regular-expressions</id>
    <content type="html"><![CDATA[<h2>Introduction</h2>

<p>Ruby regular expressions could be called slow if you were to compare them to perl regex or grep or the like.   Performance is somewhat relativistic depending on the exact problem.  However given the option between two duplicate end results, one being faster with minimal to no trade-offs, you&rsquo;d probably take the latter.</p>

<h2>Problem</h2>

<p>Parsing logs in Ruby with Regexp#match can be slow.  You can optimize your regular expression to a degree, and I admit I probably didn&rsquo;t explore that area to the absolute fullest, however at some point you will still deal with the cost of the #match method.</p>

<p>I encountered this problem while writing <a href="https://github.com/engineersamuel/splog">splog</a>. Splog gives you a simple means to parse any file based on yml defined regular expressions.  When developing splog I was first testing with anywhere from a 1 to a 1000 line log file.  After I implemented the initial round of features I stress tested with a 90k line log file.  That is when I encountered an ETA of 4 hours, something had to change.</p>

<h2>Analysis</h2>

<p>Let&rsquo;s look at some of the profiling data for ruby regular expressions.  A bit of code first.  To parse the log with a particular regular expression I first must parse the current line then the second line:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">m</span> <span class="o">=</span> <span class="vi">@pattern</span><span class="o">.</span><span class="n">match</span><span class="p">(</span><span class="n">line</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>The reason I have to match the subsequent line is to handle rolling next lines into the current line.  Think java exceptions across multiple log entries.</p>

<p>The problem though is for a 90k line file I am doing at least 180k Regexp#match calls.  This get&rsquo;s expensive fast.  To illustrate here is the <code>time</code> and <code>ruby-prof</code> of 100 lines of the 90k line server.log:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>time head -n 100 /tmp/server.log | ruby -Ilib ./bin/splog --line-count=100 -p jboss_log4j_common -c  -o -v  
</span><span class='line'>11.13s user 0.05s system 99% cpu 11.185 total</span></code></pre></td></tr></table></div></figure>




<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>head -n 100 /tmp/server.log | ruby lib/splog-prof.rb --line-count=100 -p jboss_log4j_common -c /tmp/.splog.yml -o -v
</span><span class='line'>%self      total      self      wait     child     calls  name
</span><span class='line'> 98.84     11.117    11.117     0.000     0.000      298   Regexp#match
</span><span class='line'>  0.07      0.008     0.008     0.000     0.000     9751   Kernel#class
</span><span class='line'>  0.07      0.012     0.008     0.000     0.004      398   Array#each
</span><span class='line'>  0.05      0.006     0.006     0.000     0.000      995   String#inspect
</span><span class='line'>  0.04     11.189     0.005     0.000    11.184      298   Splog::LogParser#parse_line
</span><span class='line'>  0.04      0.022     0.005     0.000     0.017      199   Hash#each
</span><span class='line'>  0.04      0.004     0.004     0.000     0.000      199   MatchData#names
</span><span class='line'>  0.03      0.047     0.004     0.000     0.043     3184  *Splog::LogParser#sigflat
</span><span class='line'>  0.02     11.248     0.003     0.000    11.245        1   Enumerator::Generator#each
</span><span class='line'>  0.02      0.008     0.002     0.000     0.006      199   Array#to_s
</span><span class='line'>  0.02      0.002     0.002     0.000     0.000     1194   Hash#[]=
</span><span class='line'>  0.02      0.010     0.002     0.000     0.008      199   Array#map!
</span><span class='line'>  0.01      0.001     0.001     0.000     0.000      995   MatchData#[]
</span><span class='line'>  0.01      0.001     0.001     0.000     0.000      199   Digest::Base#update
</span><span class='line'>  0.01      0.001     0.001     0.000     0.000      995   Hash#has_key?
</span><span class='line'>  0.01      0.001     0.001     0.000     0.000      199   Enumerator#peek
</span><span class='line'>  0.01      0.003     0.001     0.000     0.002      199   Digest::Instance#digest
</span><span class='line'>  0.01      0.004     0.001     0.000     0.003      199   &lt;Class::Digest::Class>#digest
</span><span class='line'>  0.01      0.052     0.001     0.000     0.051      199   Splog::LogParser#createsig
</span><span class='line'>  0.01      0.001     0.001     0.000     0.000      199   Array#sort!
</span><span class='line'>  0.01      0.055     0.001     0.054     0.000      100   Enumerator::Yielder#&lt;&lt;
</span><span class='line'>  0.00      0.004     0.000     0.000     0.004      199   &lt;Class::Digest::Class>#hexdigest
</span><span class='line'>  0.00      0.000     0.000     0.000     0.000      199   Module#to_s
</span><span class='line'>  0.00      0.000     0.000     0.000     0.000      398   Digest::Base#reset
</span><span class='line'>  0.00      0.000     0.000     0.000     0.000      199   &lt;Class::Digest::Base>#allocate
</span><span class='line'>  0.00      0.000     0.000     0.000     0.000      199   Digest::Base#finish
</span><span class='line'>  0.00      0.000     0.000     0.000     0.000      198   NilClass#nil?
</span><span class='line'>  0.00      0.000     0.000     0.000     0.000      198   Kernel#nil?
</span><span class='line'>  0.00      0.000     0.000     0.000     0.000      199   Digest::Class#initialize
</span><span class='line'>  0.00      0.000     0.000     0.000     0.000      100   Enumerator#next</span></code></pre></td></tr></table></div></figure>


<p>11 seconds for only 100 lines is bad.  Bad enough to lead me to hours of trial and error and attempting to optimize the regex patterns and scouring stack overflow and google for answers.</p>

<p>The best answer I got from hours of research was &lsquo;use =~ since #match is slow&rsquo;.  I tried that and it made no difference since I still needed the matching group data since the named groups are what defines the json fields and what is inserted into Mongo.</p>

<p>After a lot of trial and error and testing out different designs I had to rethink the problem.  Ruby is a joy to code in and implements the syntax of regular expressions just fine.  But Ruby isn&rsquo;t optimized like perl or grep from a performance standpoint.</p>

<p>With that in mind how about let&rsquo;s use a scalpal instead of a hammer for this problem.</p>

<h2>Solution</h2>

<p>Let native grep handle testing all subsequent lines to see if they need to be Regexp#match then let Ruby #match only when really necessary.  Not only did this reduce the #match calls by 50% but it sped up the program by upwards of 1000% percent.</p>

<p>Since grep doesn&rsquo;t support named groups I couldn&rsquo;t use grep everywhere, but that&rsquo;s no worry.</p>

<p>The main change is to take anywhere I match a next line in the enumerator and replace it with system call to grep.  This also required that I change the regular expression to remove the named groups like <code>?&lt;SomeGroup&gt;</code> and replace them with an empty string since grep doesn&rsquo;t support named group syntax:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># where parse_line invokes Regexp#match on the next log line to test match forward matches</span>
</span><span class='line'><span class="n">parsed_next_line</span> <span class="o">=</span> <span class="vi">@pattern_match_forward</span><span class="o">.</span><span class="n">nil?</span> <span class="p">?</span> <span class="n">parse_line</span><span class="p">(</span><span class="n">next_line</span><span class="p">)</span> <span class="p">:</span> <span class="n">parse_line</span><span class="p">(</span><span class="n">next_line</span><span class="p">,</span> <span class="p">{</span><span class="ss">:regex</span> <span class="o">=&gt;</span> <span class="vi">@pattern_match_forward</span><span class="p">})</span>
</span></code></pre></td></tr></table></div></figure>


<p>Instead of resulting in a Regexp#match, just call the Open3.capture3 to get a success or not success on the native match invocation on the pattern</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># where @pattern_match_forward is the named group version with the named groups replaced with &#39;&#39; to be compatible with grep</span>
</span><span class='line'><span class="n">o</span><span class="p">,</span> <span class="n">e</span><span class="p">,</span> <span class="n">s</span> <span class="o">=</span> <span class="kp">nil</span>
</span><span class='line'><span class="k">begin</span>
</span><span class='line'>    <span class="n">o</span><span class="p">,</span> <span class="n">e</span><span class="p">,</span> <span class="n">s</span> <span class="o">=</span> <span class="no">Open3</span><span class="o">.</span><span class="n">capture3</span><span class="p">(</span><span class="vi">@pattern_match_forward</span><span class="o">.</span><span class="n">nil?</span> <span class="p">?</span> <span class="vi">@pattern_egrep</span> <span class="p">:</span> <span class="vi">@pattern_match_forward_egrep</span><span class="p">,</span> <span class="ss">:stdin_data</span><span class="o">=&gt;</span><span class="n">next_line</span><span class="p">)</span>
</span><span class='line'><span class="k">rescue</span> <span class="ss">Errno</span><span class="p">:</span><span class="ss">:EPIPE</span>
</span><span class='line'>    <span class="nb">puts</span> <span class="s2">&quot;Connection broke!&quot;</span>
</span><span class='line'>    <span class="kp">nil</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>In the above Open3.capture3 return the <code>s</code> represents a successful match verified by <code>s &amp;&amp; s.success?</code></p>

<p>Now that native grep is being used let&rsquo;s take a look at time and ruby-prof again.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>time head -n 100 /tmp/server.log | ruby -Ilib ./bin/splog --line-count=100 -p jboss_log4j_common -c  -o -v  
</span><span class='line'>0.96s user 0.84s system 104% cpu 1.723 total</span></code></pre></td></tr></table></div></figure>


<p>That simple change reduced the time from 11 seconds to 1.7.  The difference is much more dramatic when parsing the whole file.  On my quad core laptop parsing the entire 90k log file with the old code had an ETA of 4 hours while with the new code it was only 18 minutes.</p>

<p>Let&rsquo;s look at the <code>ruby-prof</code> of the first 100 lines as well</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>head -n 100 /tmp/server.log | ruby lib/splog-prof.rb --line-count=100 -p jboss_log4j_common -c /tmp/.splog.yml -o -v
</span><span class='line'> %self      total      self      wait     child     calls  name
</span><span class='line'> 29.98      0.314     0.303     0.000     0.010      396   &lt;Class::Thread>#new
</span><span class='line'> 26.94      0.273     0.273     0.000     0.000      198   Kernel#spawn
</span><span class='line'> 18.12      0.185     0.183     0.000     0.002      198   &lt;Module::Process>#detach
</span><span class='line'>  2.36      0.896     0.024     0.000     0.873      198   Open3#popen_run
</span><span class='line'>  1.29      0.054     0.013     0.041     0.000      594   Thread#value
</span><span class='line'>  1.22      0.031     0.012     0.018     0.000      198   IO#write
</span><span class='line'>  1.07      0.020     0.011     0.000     0.009      596   Array#each
</span><span class='line'>  1.01      0.010     0.010     0.000     0.000      396   Thread#initialize
</span><span class='line'>  0.87      1.012     0.009     0.000     1.003        1   Enumerator::Generator#each
</span><span class='line'>  0.83      0.008     0.008     0.000     0.000     1188   IO#initialize
</span><span class='line'>  0.82      0.008     0.008     0.000     0.000      100   Regexp#match
</span><span class='line'>  0.77      0.008     0.008     0.000     0.000     1188   IO#close
</span><span class='line'>  0.62      0.016     0.006     0.000     0.010      594   &lt;Class::IO>#pipe
</span><span class='line'>  0.47      0.921     0.005     0.000     0.916      198   Open3#popen3
</span><span class='line'>  0.46      0.931     0.005     0.000     0.926      198   Open3#capture3
</span><span class='line'>  0.36      0.004     0.004     0.000     0.000     4900   Kernel#class
</span><span class='line'>  0.31      0.003     0.003     0.000     0.000      500   String#inspect
</span><span class='line'>  0.28      0.003     0.003     0.000     0.000     1194   Hash#[]=
</span><span class='line'>  0.27      0.046     0.003     0.000     0.043      100   Splog::LogParser#parse_line</span></code></pre></td></tr></table></div></figure>


<p>The beautiful part of this profiling is there are no longer 298 expensive calls to Regexp#match.  There are only now as many calls to Regexp#match as there are lines in the file.  This dramatically speeds the code up.   Offloading the match forward parses to grep definitely pays off here with minimal cost to spawning the grep process.</p>

<h2>Final Thoughts</h2>

<p>It wasn&rsquo;t my first or second option to go outside of Ruby to speed up the regular expressions.  I felt it was too much of a hack at first.  If I can make a performance optimization within a framework/library/language versus outside of it and all things are equal, I&rsquo;d always choose in..  I definitely know there are other optimizations I can make, however once I ruled out all reasonable ones that I could find, this solution presented itself and it is actually a very clean solution.</p>

<p>I struggled with finding a good solution to the slowness of Ruby Regexp#match on large files, so hopefully this post will save some of you some headaches when searching for options.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[RequireJS + AngularJS + pnotify]]></title>
    <link href="http://engineersamuel.github.io/dbits/blog/2013/08/19/requirejs-plus-angularjs-plus-pnotify/"/>
    <updated>2013-08-19T21:05:00-04:00</updated>
    <id>http://engineersamuel.github.io/dbits/blog/2013/08/19/requirejs-plus-angularjs-plus-pnotify</id>
    <content type="html"><![CDATA[<h3>Introduction</h3>

<p>Let&rsquo;s add pnotify: <a href="http://pinesframework.org/pnotify/">Pines Notify</a> to an AngularJS webapp using RequireJS.  Now typically with an AngularJS app you would do this per the pnotify <a href="https://github.com/sciactive/pnotify#getting-started">directions</a>.  When using RequireJS the steps are a bit different however.</p>

<h3>Basic Example</h3>

<h4>Steps:</h4>

<ul>
<li><p>From <a href="https://github.com/sciactive/pnotify">pnotify/Github</a> Copy jquery.pnotify.js to your lib/notify directory and jquery.pnotify.default.css and jquery.pnotify.default.icons.css to your css directory.  You can choose the directory structure as you see fit, as long as it is setup properly in RequireJS</p></li>
<li><p>Add the css to your index, no need to add the pnotify js however, that will be handled by require.</p></li>
</ul>


<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='jade'><span class='line'><span class="nn">!!! transitional</span>
</span><span class='line'><span class="nt">html</span>(<span class="na">lang=</span><span class="s">&quot;en&quot;</span><span class="err">,</span> <span class="na">ng-app=</span><span class="s">&quot;&quot;</span>)
</span><span class='line'>    <span class="nt">head</span>
</span><span class='line'>        <span class="nt">title</span> Data Glue
</span><span class='line'>        <span class="nt">meta</span>(<span class="na">name=</span><span class="s">&quot;viewport&quot;</span><span class="err">,</span><span class="na">content=</span><span class="s">&quot;width=device-width, initial-scale=1.0&quot;</span>)
</span><span class='line'>        <span class="nt">script</span>(<span class="na">data-main=</span><span class="s">&quot;js/main&quot;</span><span class="err">,</span><span class="na">src=</span><span class="s">&quot;js/lib/require/require.js&quot;</span>)
</span><span class='line'>        <span class="nt">link</span>(<span class="na">rel=</span><span class="s">&quot;stylesheet&quot;</span><span class="err">,</span><span class="na">type=</span><span class="s">&quot;text/css&quot;</span><span class="err">,</span><span class="na">media=</span><span class="s">&quot;all&quot;</span><span class="err">,</span><span class="na">href=</span><span class="s">&quot;css/bootstrap.min.css&quot;</span>)
</span><span class='line'>        <span class="nt">link</span>(<span class="na">rel=</span><span class="s">&quot;stylesheet&quot;</span><span class="err">,</span><span class="na">type=</span><span class="s">&quot;text/css&quot;</span><span class="err">,</span><span class="na">media=</span><span class="s">&quot;all&quot;</span><span class="err">,</span><span class="na">href=</span><span class="s">&quot;css/app.css&quot;</span>)
</span><span class='line'>        <span class="nt">link</span>(<span class="na">rel=</span><span class="s">&quot;stylesheet&quot;</span><span class="err">,</span><span class="na">type=</span><span class="s">&quot;text/css&quot;</span><span class="err">,</span><span class="na">media=</span><span class="s">&quot;all&quot;</span><span class="err">,</span><span class="na">href=</span><span class="s">&quot;css/pines/jquery.pnotify.default.css&quot;</span>)
</span><span class='line'>        <span class="nt">link</span>(<span class="na">rel=</span><span class="s">&quot;stylesheet&quot;</span><span class="err">,</span><span class="na">type=</span><span class="s">&quot;text/css&quot;</span><span class="err">,</span><span class="na">media=</span><span class="s">&quot;all&quot;</span><span class="err">,</span><span class="na">href=</span><span class="s">&quot;css/pines/jquery.pnotify.default.icons.css&quot;</span>)
</span><span class='line'>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>Your main.js should looks similar to:</li>
</ul>


<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">require</span><span class="p">.</span><span class="nx">config</span><span class="p">({</span>
</span><span class='line'>    <span class="nx">paths</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>        <span class="nx">jquery</span><span class="o">:</span> <span class="s1">&#39;lib/jquery/jquery-2.0.3&#39;</span><span class="p">,</span>
</span><span class='line'>        <span class="nx">angular</span><span class="o">:</span> <span class="s1">&#39;lib/angular/angular&#39;</span><span class="p">,</span>
</span><span class='line'>        <span class="nx">text</span><span class="o">:</span> <span class="s1">&#39;lib/require/text&#39;</span><span class="p">,</span>
</span><span class='line'>        <span class="nx">bootstrap</span><span class="o">:</span> <span class="s1">&#39;lib/bootstrap/bootstrap&#39;</span><span class="p">,</span>
</span><span class='line'>        <span class="s1">&#39;jquery.pnotify&#39;</span><span class="o">:</span> <span class="s1">&#39;lib/pines/jquery.pnotify&#39;</span>
</span><span class='line'>        <span class="c1">// You could also reference the github path</span>
</span><span class='line'>        <span class="c1">//&#39;jquery.pnotify&#39;: &#39;https://raw.github.com/sciactive/pnotify/master/jquery.pnotify.min&#39;</span>
</span><span class='line'>
</span><span class='line'>    <span class="p">},</span>
</span><span class='line'>    <span class="nx">baseUrl</span><span class="o">:</span> <span class="s1">&#39;js&#39;</span><span class="p">,</span>
</span><span class='line'>    <span class="nx">shim</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>        <span class="s1">&#39;angular&#39;</span> <span class="o">:</span> <span class="p">{</span><span class="s1">&#39;exports&#39;</span> <span class="o">:</span> <span class="s1">&#39;angular&#39;</span><span class="p">},</span>
</span><span class='line'>        <span class="s1">&#39;angularMocks&#39;</span><span class="o">:</span> <span class="p">{</span><span class="nx">deps</span><span class="o">:</span><span class="p">[</span><span class="s1">&#39;angular&#39;</span><span class="p">],</span> <span class="s1">&#39;exports&#39;</span><span class="o">:</span><span class="s1">&#39;angular.mock&#39;</span><span class="p">},</span>
</span><span class='line'>        <span class="s1">&#39;bootstrap&#39;</span><span class="o">:</span> <span class="p">[</span><span class="s2">&quot;jquery&quot;</span><span class="p">],</span>
</span><span class='line'>        <span class="c1">// Nothing too special here, just remember to depend on jquery</span>
</span><span class='line'>        <span class="s1">&#39;jquery.pnotify&#39;</span><span class="o">:</span> <span class="p">[</span><span class="s2">&quot;jquery&quot;</span><span class="p">]</span>
</span><span class='line'>    <span class="p">},</span>
</span><span class='line'>    <span class="nx">priority</span><span class="o">:</span> <span class="p">[</span>
</span><span class='line'>        <span class="s2">&quot;angular&quot;</span>
</span><span class='line'>    <span class="p">],</span>
</span><span class='line'>    <span class="c1">// http://stackoverflow.com/questions/8315088/prevent-requirejs-from-caching-required-scripts</span>
</span><span class='line'>    <span class="nx">urlArgs</span><span class="o">:</span> <span class="s2">&quot;bust=&quot;</span> <span class="o">+</span> <span class="p">(</span><span class="k">new</span> <span class="nb">Date</span><span class="p">()).</span><span class="nx">getTime</span><span class="p">()</span>
</span><span class='line'><span class="p">});</span>
</span><span class='line'>
</span><span class='line'><span class="nx">require</span><span class="p">([</span>
</span><span class='line'>    <span class="s1">&#39;angular&#39;</span><span class="p">,</span>
</span><span class='line'>    <span class="s1">&#39;app&#39;</span><span class="p">,</span>
</span><span class='line'>    <span class="s1">&#39;routes&#39;</span><span class="p">,</span>
</span><span class='line'>    <span class="s1">&#39;bootstrap&#39;</span>
</span><span class='line'><span class="p">],</span> <span class="kd">function</span><span class="p">(</span><span class="nx">angular</span><span class="p">,</span> <span class="nx">app</span><span class="p">,</span> <span class="nx">routes</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="s1">&#39;use strict&#39;</span><span class="p">;</span>
</span><span class='line'>    <span class="nx">angular</span><span class="p">.</span><span class="nx">bootstrap</span><span class="p">(</span><span class="nb">document</span><span class="p">,</span> <span class="p">[</span><span class="nx">app</span><span class="p">[</span><span class="s1">&#39;name&#39;</span><span class="p">]]);</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>Now for defining a Controller using RequireJS that works with AngularJS.  The key here is to depend on jquery and jquery.pnotify in the RequireJS define, not in the second AngularJS []</li>
</ul>


<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='coffeescript'><span class='line'><span class="nx">define</span> <span class="p">[</span><span class="s">&quot;jquery&quot;</span><span class="p">,</span> <span class="s">&quot;jquery.pnotify&quot;</span><span class="p">],</span> <span class="nf">($) -&gt;</span>
</span><span class='line'>  <span class="p">[</span><span class="s">&#39;$scope&#39;</span><span class="p">,</span> <span class="nf">($scope) -&gt;</span>
</span><span class='line'>    <span class="nx">$</span><span class="p">.</span><span class="nx">pnotify</span>
</span><span class='line'>        <span class="nv">title: </span><span class="s">&#39;Regular Notice&#39;</span><span class="p">,</span>
</span><span class='line'>        <span class="nv">text: </span><span class="s">&#39;Check me out! I\&#39;m a notice.&#39;</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1"># because this has happened asynchronously we&#39;ve missed</span>
</span><span class='line'>    <span class="c1"># Angular&#39;s initial call to $apply after the controller has been loaded</span>
</span><span class='line'>    <span class="c1"># hence we need to explicityly call it at the end of our Controller constructor</span>
</span><span class='line'>    <span class="nx">$scope</span><span class="p">.</span><span class="nx">$apply</span><span class="p">();</span>
</span><span class='line'>  <span class="p">]</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>This works great, however we can make this even more consice and modular by turning the pnotify into a service.</li>
</ul>


<p>Open your services.js make sure that jquery and jquery.pnotify are dependencies, then add a factory for the pnotify.</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">define</span><span class="p">([</span><span class="s1">&#39;angular&#39;</span><span class="p">,</span> <span class="s1">&#39;jquery&#39;</span><span class="p">,</span> <span class="s1">&#39;jquery.pnotify&#39;</span><span class="p">],</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">angular</span><span class="p">,</span> <span class="nx">$</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="s1">&#39;use strict&#39;</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="nx">angular</span><span class="p">.</span><span class="nx">module</span><span class="p">(</span><span class="s1">&#39;myApp.services&#39;</span><span class="p">,</span> <span class="p">[])</span>
</span><span class='line'>        <span class="p">.</span><span class="nx">value</span><span class="p">(</span><span class="s1">&#39;version&#39;</span><span class="p">,</span> <span class="s1">&#39;0.1&#39;</span><span class="p">)</span>
</span><span class='line'>        <span class="p">.</span><span class="nx">service</span><span class="p">(</span><span class="s1">&#39;sharedProperties&#39;</span><span class="p">,</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
</span><span class='line'>            <span class="k">return</span> <span class="p">{</span>
</span><span class='line'>                <span class="nx">foo</span><span class="o">:</span> <span class="s1">&#39;bar&#39;</span>
</span><span class='line'>            <span class="p">};</span>
</span><span class='line'>        <span class="p">})</span>
</span><span class='line'>        <span class="p">.</span><span class="nx">factory</span><span class="p">(</span><span class="s1">&#39;notificationService&#39;</span><span class="p">,</span> <span class="p">[</span><span class="s1">&#39;$http&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">$http</span><span class="p">){</span>
</span><span class='line'>            <span class="k">return</span> <span class="p">{</span>
</span><span class='line'>                <span class="nx">notify</span><span class="o">:</span> <span class="kd">function</span><span class="p">(</span><span class="nx">hash</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>                    <span class="nx">$</span><span class="p">.</span><span class="nx">pnotify</span><span class="p">(</span><span class="nx">hash</span><span class="p">);</span>
</span><span class='line'>                <span class="p">}</span>
</span><span class='line'>            <span class="p">};</span>
</span><span class='line'>        <span class="p">}]);</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>The benefit here is not only does this result in less code in the controllers, but also that the notifications are abstracted so you could easily switch out the notification framework or add additional logging or the like without modifying your controllers.</p>

<p>Speaking of controllers, let&rsquo;s change the previous controller definition to:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='coffeescript'><span class='line'><span class="nx">define</span> <span class="p">[],</span> <span class="p">()</span> <span class="nf">-&gt;</span>
</span><span class='line'>  <span class="p">[</span><span class="s">&#39;$scope&#39;</span><span class="p">,</span> <span class="s">&#39;$http&#39;</span><span class="p">,</span> <span class="s">&#39;notificationService&#39;</span><span class="p">,</span> <span class="nf">($scope, $http, notificationService) -&gt;</span>
</span><span class='line'>    <span class="nx">notificationService</span><span class="p">.</span><span class="nx">notify</span>
</span><span class='line'>      <span class="nv">title: </span><span class="s">&#39;Regular Notice&#39;</span><span class="p">,</span>
</span><span class='line'>      <span class="nv">text: </span><span class="s">&#39;Check me out! I\&#39;m a notice.&#39;</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1"># because this has happened asynchroneusly we&#39;ve missed</span>
</span><span class='line'>    <span class="c1"># Angular&#39;s initial call to $apply after the controller has been loaded</span>
</span><span class='line'>    <span class="c1"># hence we need to explicityly call it at the end of our Controller constructor</span>
</span><span class='line'>    <span class="nx">$scope</span><span class="p">.</span><span class="nx">$apply</span><span class="p">();</span>
</span><span class='line'>  <span class="p">]</span>
</span></code></pre></td></tr></table></div></figure>


<p>That&rsquo;s it, you can depend on that notificationService in Angular now for easy notifications.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Suppressing knockout.js evaluation errors]]></title>
    <link href="http://engineersamuel.github.io/dbits/blog/2013/08/12/suppressing-knockout-dot-js-evaluation-errors/"/>
    <updated>2013-08-12T19:53:00-04:00</updated>
    <id>http://engineersamuel.github.io/dbits/blog/2013/08/12/suppressing-knockout-dot-js-evaluation-errors</id>
    <content type="html"><![CDATA[<h3>Introduction</h3>

<p>This is not intended to be a beginners guide or tutorial on knockout.js.  For those of you who are unfarmiliar with Knockout.js please see <a href="http://knockoutjs.com/">Knockout.js</a></p>

<p>I&rsquo;ve coded quite extensively in knockout.js, it isn&rsquo;t a large framework, and it does have a few minior pain points, but overall it is a highly effective framework that allows for significant productivity.</p>

<h3>Problem</h3>

<p>You may venture into working with much more unstructured content with Knockout.  I personally prefer <em>schemaless</em>/<em>modeless</em> designs when working with projects that lend to that style.  When I say <em>schemaless</em> or <em>modeless</em> I mean passing json directly from the database through the <em>response</em> to Knockout observables.</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='coffeescript'><span class='line'><span class="k">class</span> <span class="nx">@ViewModelProducts</span>
</span><span class='line'>    <span class="nv">constructor: </span><span class="p">()</span> <span class="nf">-&gt;</span>
</span><span class='line'>        <span class="vi">@products = </span><span class="nx">ko</span><span class="p">.</span><span class="nx">observableArray</span><span class="p">([])</span>
</span><span class='line'>
</span><span class='line'>    <span class="nv">fetch_products: </span><span class="p">()</span> <span class="nf">-&gt;</span>
</span><span class='line'>        <span class="nv">the_promise = </span><span class="nx">$</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="s">&#39;/products&#39;</span><span class="p">,</span> <span class="p">{</span><span class="nv">somearg: </span><span class="kc">undefined</span><span class="p">})</span>
</span><span class='line'>        <span class="nx">$</span><span class="p">.</span><span class="nx">when</span><span class="p">(</span><span class="nx">the_promise</span><span class="p">).</span><span class="nx">done</span><span class="p">(</span> <span class="nf">(response) =&gt;</span>
</span><span class='line'>            <span class="c1"># Remember the =&gt; is required in the nested ajax to access @</span>
</span><span class='line'>            <span class="c1"># I&#39;m passing in either the js obj if it is native or the parsed version if it was stringified</span>
</span><span class='line'>            <span class="nx">@products</span> <span class="k">if</span> <span class="k">typeof</span> <span class="nx">response</span> <span class="o">is</span> <span class="s">&quot;object&quot;</span> <span class="k">then</span> <span class="k">return</span> <span class="nx">response</span> <span class="k">else</span> <span class="k">if</span> <span class="nx">response</span> <span class="o">is</span> <span class="s">&quot;&quot;</span> <span class="k">then</span> <span class="k">return</span> <span class="kc">undefined</span> <span class="k">else</span> <span class="k">return</span> <span class="nx">JSON</span><span class="p">.</span><span class="nx">parse</span><span class="p">(</span><span class="nx">response</span><span class="p">)</span>
</span><span class='line'>        <span class="p">).</span><span class="nx">fail</span><span class="p">(</span> <span class="nf">(response) -&gt;</span>
</span><span class='line'>            <span class="nx">console</span><span class="p">.</span><span class="nx">log</span> <span class="nx">response</span><span class="p">.</span><span class="nx">error</span>
</span><span class='line'>        <span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>There is definitely a risk associated with this however, and that is Knockout failing on evaluating a field that doesn&rsquo;t exist, either by intention or not.   This risk would be a valid argument of those arguing for type safety, which could be somewhat imposed more strictly by using javascript classes.</p>

<p>However, I&rsquo;ve found that creating a coffeescript class/viewmodel and using the <a href="http://knockoutjs.com/documentation/plugins-mapping.html">Knockout mapping plugin</a> to map the json is not necessarily as efficient as simply reading the json straight into an <em>observable</em>.  Don&rsquo;t get me wrong, the Knockout mapping works fantastically, but there is a decent amount of code just to write each class that you want to map.</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='jade'><span class='line'><span class="nt">table</span>
</span><span class='line'>    <span class="nt">thead</span>
</span><span class='line'>        <span class="nt">tr</span>
</span><span class='line'>            <span class="nt">th</span> Name
</span><span class='line'>            <span class="nt">th</span> Price
</span><span class='line'>    <span class="nt">tbody</span>(<span class="na">data-bind=</span><span class="s">&quot;foreach: viewModels.viewModelProducts.products&quot;</span>)
</span><span class='line'>        <span class="nt">tr</span>
</span><span class='line'>            <span class="nt">td</span>(<span class="na">data-bind=</span><span class="s">&quot;text: name&quot;</span>)
</span><span class='line'>            <span class="nt">td</span>(<span class="na">data-bind=</span><span class="s">&quot;text: vendor&quot;</span>)
</span><span class='line'>            <span class="nt">td</span>(<span class="na">data-bind=</span><span class="s">&quot;text: price&quot;</span>)
</span></code></pre></td></tr></table></div></figure>


<p>Now let&rsquo;s say that the json returns several correct items then one with a  <em>name</em> and <em>price</em> but <strong>not</strong> a <em>vendor</em> field.  This is going to cause Knockout.js to fail and not process anymore data-binds on the page.  This can be very inconvenient.  You may reflexibly think this is a good thing, and it very well may be, but there is definitely a use case for a backend model that may be missing fields unintentially or by design.</p>

<p>The above will result in the the products being listed up to the point of the one missing the vendor field, then none after that point:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>Uncaught Error: Unable to parse bindings.
</span><span class='line'>Message: ReferenceError: vendor is not defined;
</span><span class='line'>Bindings value: text: vendor</span></code></pre></td></tr></table></div></figure>


<p>This is the problem.  In the event of a developer mistake, or missing data, my opinion is it is better to continue processing instead of failing the rest of the page.</p>

<h3>Solution</h3>

<p>The solution to the above problem requires hacking Knockout.js to prevent it from terminating early in the processesing of a page upon a data-bind evaluation error.</p>

<p>To contain all of my custom Knockout bindings I created a file called koBindingHandlers.coffee is included in my header after the knockout library.  In other works, knockout must first be available for knockout to be overridden.</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
</pre></td><td class='code'><pre><code class='coffeescript'><span class='line'><span class="c1"># Only one section overridden here, that is the catch of the &#39;parseBindingsString&#39;</span>
</span><span class='line'><span class="nx">ko</span><span class="p">.</span><span class="nx">utils</span><span class="p">.</span><span class="nx">extend</span> <span class="nx">ko</span><span class="p">.</span><span class="nx">bindingProvider</span><span class="p">.</span><span class="nx">prototype</span><span class="p">,</span> <span class="p">{</span>
</span><span class='line'>  <span class="s">&#39;nodeHasBindings&#39;</span><span class="o">:</span> <span class="nf">(node) -&gt;</span>
</span><span class='line'>    <span class="k">if</span> <span class="nx">node</span><span class="p">.</span><span class="nx">nodeType</span> <span class="o">is</span> <span class="mi">1</span>
</span><span class='line'>      <span class="k">return</span> <span class="nx">node</span><span class="p">.</span><span class="nx">getAttribute</span><span class="p">(</span><span class="s">&#39;data-bind&#39;</span><span class="p">)</span> <span class="o">!=</span> <span class="kc">null</span>
</span><span class='line'>    <span class="k">else</span> <span class="k">if</span> <span class="nx">node</span><span class="p">.</span><span class="nx">nodeType</span> <span class="o">is</span> <span class="mi">8</span>
</span><span class='line'>      <span class="k">return</span> <span class="nx">ko</span><span class="p">.</span><span class="nx">virtualElements</span><span class="p">.</span><span class="nx">virtualNodeBindingValue</span><span class="p">(</span><span class="nx">node</span><span class="p">)</span> <span class="o">!=</span> <span class="kc">null</span>
</span><span class='line'>    <span class="k">else</span>
</span><span class='line'>      <span class="k">return</span> <span class="kc">false</span>
</span><span class='line'>
</span><span class='line'>  <span class="s">&#39;getBindings&#39;</span><span class="o">:</span> <span class="nf">(node, bindingContext) -&gt;</span>
</span><span class='line'>    <span class="nv">bindingsString = </span><span class="k">this</span><span class="p">[</span><span class="s">&#39;getBindingsString&#39;</span><span class="p">](</span><span class="nx">node</span><span class="p">,</span> <span class="nx">bindingContext</span><span class="p">);</span>
</span><span class='line'>    <span class="k">if</span> <span class="nx">bindingsString</span>
</span><span class='line'>      <span class="k">return</span> <span class="k">this</span><span class="p">[</span><span class="s">&#39;parseBindingsString&#39;</span><span class="p">](</span><span class="nx">bindingsString</span><span class="p">,</span> <span class="nx">bindingContext</span><span class="p">,</span> <span class="nx">node</span><span class="p">)</span>
</span><span class='line'>    <span class="k">else</span>
</span><span class='line'>      <span class="k">return</span> <span class="kc">null</span>
</span><span class='line'>
</span><span class='line'>  <span class="s">&#39;getBindingsString&#39;</span><span class="o">:</span> <span class="nf">(node, bindingContext) -&gt;</span>
</span><span class='line'>    <span class="k">if</span> <span class="nx">node</span><span class="p">.</span><span class="nx">nodeType</span> <span class="o">is</span> <span class="mi">1</span>
</span><span class='line'>      <span class="k">return</span> <span class="nx">node</span><span class="p">.</span><span class="nx">getAttribute</span><span class="p">(</span><span class="s">&#39;data-bind&#39;</span><span class="p">)</span>
</span><span class='line'>    <span class="k">else</span> <span class="k">if</span> <span class="nx">node</span><span class="p">.</span><span class="nx">nodeType</span> <span class="o">is</span> <span class="mi">8</span>
</span><span class='line'>      <span class="nx">ko</span><span class="p">.</span><span class="nx">virtualElements</span><span class="p">.</span><span class="nx">virtualNodeBindingValue</span><span class="p">(</span><span class="nx">node</span><span class="p">)</span>
</span><span class='line'>    <span class="k">else</span>
</span><span class='line'>      <span class="k">return</span> <span class="kc">null</span>
</span><span class='line'>
</span><span class='line'>  <span class="s">&#39;parseBindingsString&#39;</span><span class="o">:</span> <span class="nf">(bindingsString, bindingContext, node) -&gt;</span>
</span><span class='line'>    <span class="k">try</span>
</span><span class='line'>      <span class="nv">bindingFunction = </span><span class="nx">createBindingsStringEvaluatorViaCache</span><span class="p">(</span><span class="nx">bindingsString</span><span class="p">,</span> <span class="k">this</span><span class="p">.</span><span class="nx">bindingCache</span><span class="p">)</span>
</span><span class='line'>      <span class="k">return</span> <span class="nx">bindingFunction</span><span class="p">(</span><span class="nx">bindingContext</span><span class="p">,</span> <span class="nx">node</span><span class="p">);</span>
</span><span class='line'>    <span class="k">catch</span> <span class="nx">ex</span>
</span><span class='line'>      <span class="c1"># Comment this out!</span>
</span><span class='line'>      <span class="c1"># throw new Error(&quot;Unable to parse bindings.\nMessage: &quot; + ex + &quot;;\nBindings value: &quot; + bindingsString)</span>
</span><span class='line'>      <span class="c1"># Optionally uncomment this to debug problems, otherwise all errors are supressed.</span>
</span><span class='line'>      <span class="c1"># console.warn &quot;Unable to parse bindings.\nMessage: &quot; + ex + &quot;;\nBindings value: &quot; + bindingsString</span>
</span><span class='line'>      <span class="k">return</span> <span class="kc">undefined</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="nx">ko</span><span class="p">.</span><span class="nx">bindingProvider</span><span class="p">[</span><span class="s">&#39;instance&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">ko</span><span class="p">.</span><span class="nx">bindingProvider</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'><span class="nv">createBindingsStringEvaluatorViaCache = </span><span class="nf">(bindingsString, cache) -&gt;</span>
</span><span class='line'>  <span class="nv">cacheKey = </span><span class="nx">bindingsString</span><span class="p">;</span>
</span><span class='line'>  <span class="k">return</span> <span class="nx">cache</span><span class="p">[</span><span class="nx">cacheKey</span><span class="p">]</span> <span class="o">||</span> <span class="p">(</span><span class="nx">cache</span><span class="p">[</span><span class="nx">cacheKey</span><span class="p">]</span> <span class="o">=</span> <span class="nx">createBindingsStringEvaluator</span><span class="p">(</span><span class="nx">bindingsString</span><span class="p">))</span>
</span><span class='line'>
</span><span class='line'><span class="nv">createBindingsStringEvaluator = </span><span class="nf">(bindingsString) -&gt;</span>
</span><span class='line'>  <span class="nv">rewrittenBindings = </span><span class="nx">ko</span><span class="p">.</span><span class="nx">expressionRewriting</span><span class="p">.</span><span class="nx">preProcessBindings</span><span class="p">(</span><span class="nx">bindingsString</span><span class="p">)</span>
</span><span class='line'>  <span class="nv">functionBody = </span><span class="s">&quot;with($context){with($data||{}){return{&quot;</span> <span class="o">+</span> <span class="nx">rewrittenBindings</span> <span class="o">+</span> <span class="s">&quot;}}}&quot;</span>
</span><span class='line'>  <span class="k">return</span> <span class="k">new</span> <span class="nb">Function</span><span class="p">(</span><span class="s">&quot;$context&quot;</span><span class="p">,</span> <span class="s">&quot;$element&quot;</span><span class="p">,</span> <span class="nx">functionBody</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>In the above code, in <em>&lsquo;parseBindingsString&rsquo;</em> I commented out:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='coffeescript'><span class='line'><span class="k">throw</span> <span class="k">new</span> <span class="nb">Error</span><span class="p">(</span><span class="s">&quot;Unable to parse bindings.\nMessage: &quot;</span> <span class="o">+</span> <span class="nx">ex</span> <span class="o">+</span> <span class="s">&quot;;\nBindings value: &quot;</span> <span class="o">+</span> <span class="nx">bindingsString</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>When this js error is thrown it causes the early termination of processing of any more Knockout bindings.  The sideeffect is it does become very difficult at times to debug when you&rsquo;ve made a small mistake.  In that case you can simply uncomment:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='coffeescript'><span class='line'><span class="nx">console</span><span class="p">.</span><span class="nx">warn</span> <span class="s">&quot;Unable to parse bindings.\nMessage: &quot;</span> <span class="o">+</span> <span class="nx">ex</span> <span class="o">+</span> <span class="s">&quot;;\nBindings value: &quot;</span> <span class="o">+</span> <span class="nx">bindingsString</span>
</span></code></pre></td></tr></table></div></figure>


<p>In practice I find it rare that implementing the above workaround causes any development pain.  If something seems off or not rendering, I simply uncomment the <em>console.log</em> figure out what is breaking the Knockout binding, fix it, and continue.</p>

<p>I hope this helps some of you other Knockout users since this was originally one of my pain points with the Library.</p>
]]></content>
  </entry>
  
</feed>
